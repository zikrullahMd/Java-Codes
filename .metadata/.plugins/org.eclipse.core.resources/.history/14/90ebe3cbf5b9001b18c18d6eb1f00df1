import java.util.*;
import java.math.*;
import java.util.Map.Entry;
public class Misc
{
    public static void main(String[] args)
    {
        Scanner in = new Scanner(System.in);
        String s = in.next();
        int start = 0;
        int end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        System.out.println(s.substring(start,end+1));
    }
    public static int expandAroundCenter(String s, int left , int right) {
    	int L = left, R = right;
        while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
            L--;
            R++;
        }
        return R - L - 1;
    }
}










/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
class Solution {
    public ListNode solve(ListNode root) {
        if(root == null) return root;
        int n = 0;
        ListNode curr = root;
        while(curr != null){
            n++;
            curr = curr.next;
        }
        if(n <= 3){
            return root;
        }
        curr = root;
        int temp = 1;
        Stack<ListNode> st = new Stack<>();
        Queue<ListNode> q = new LinkedList<>();
        while(curr != null){
            if(temp % 2 == 0){
                st.push(curr);
            }else{
                q.add(curr);
            }
            temp++;
            curr = curr.next;
        }
        temp = 1;
        ListNode ans = new ListNode(0);
        ListNode head = ans;
        while(!st.isEmpty() || !q.isEmpty()){
            if(temp % 2 != 0 && !q.isEmpty()){
                head.next = q.poll();
                head = head.next;
            }else if(temp % 2 == 0 && !st.isEmpty()){
                head.next = st.pop();
                head = head.next;
            }
            temp++;
        }
        return ans.next;
    }
}


















